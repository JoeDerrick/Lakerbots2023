



// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

//import frc.robot.commands.*;
import frc.robot.commands.ArmCommands.ArmGo;
import frc.robot.commands.ArmCommands.ArmGoToPosition;
import frc.robot.commands.ArmCommands.ArmStop;
import frc.robot.commands.ArmCommands.ArmHold;
import frc.robot.commands.ArmCommands.ArmJoystick;
import frc.robot.commands.ArmCommands.VelocityMode;
//import frc.robot.commands.ArmCommands.ArmMotorLeadGo;
//import frc.robot.commands.ArmCommands.ArmMotorLeadStop;
import frc.robot.commands.DrivetrainCommands.ChangeIfTurbo;
import frc.robot.commands.DrivetrainCommands.Drive;
import frc.robot.commands.DrivetrainCommands.DriveAmount;
import frc.robot.commands.DrivetrainCommands.ZeroGyro;
import frc.robot.commands.ElevatorCommands.ElevatorManual;
import frc.robot.commands.ElevatorCommands.ElevatorMotorGo;
import frc.robot.commands.ElevatorCommands.ElevatorMotorStop;
import frc.robot.commands.ElevatorCommands.ElevatorResetEncoder;
import frc.robot.commands.ElevatorCommands.ElevatorTune;
import frc.robot.commands.ExampleCommands.AutonomousCommand;
import frc.robot.commands.ExampleCommands.ExampleCommand;
import frc.robot.commands.ExampleCommands.ExampleInstantCommand;
import frc.robot.commands.ExampleCommands.ExampleSequentialCommandGroup;
import frc.robot.commands.IntakeCommands.IntakeDoNothing;
import frc.robot.commands.IntakeCommands.IntakeMotorGo;
//import frc.robot.commands.IntakeCommands.IntakeMotorLeftGoLoop;
import frc.robot.commands.IntakeCommands.IntakeMotorStop;
import frc.robot.commands.IntakeCommands.IntakeMotorGo;
//import frc.robot.commands.IntakeCommands.IntakeMotorRightGoLoop;
import frc.robot.commands.IntakeCommands.IntakeMotorStop;
//import frc.robot.commands.IntakeCommands.IntakeMotorSqueezeGo;
import frc.robot.commands.IntakeCommands.Squeeze;
import frc.robot.commands.IntakeCommands.Release;
import frc.robot.commands.IntakeCommands.ScoreWithTrigger;
//import frc.robot.commands.WristCommands.WristManual;
import frc.robot.commands.WristCommands.WristGo;
//import frc.robot.commands.WristCommands.WristMotorGoToPosition;
import frc.robot.commands.WristCommands.WristStop;
import frc.robot.commands.WristCommands.WristHold;
import frc.robot.commands.WristCommands.WristJoystick;
import frc.robot.commands.WristCommands.WristMoveOne;
//import frc.robot.commands.WristCommands.WristMoveBack;
//import frc.robot.commands.WristCommands.WristMoveHome;
import frc.robot.commands.WristCommands.WristGoToPosition;
import frc.robot.subsystems.*;
import frc.robot.subsystems.drivetrain;

import frc.robot.commands.DrivetrainCommands.Drive;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import frc.robot.commands.DrivetrainCommands.Drive.*;
import frc.robot.commands.LEDCommands.Purple;
import frc.robot.commands.LEDCommands.SpiritColors;
import frc.robot.commands.LEDCommands.Yellow;
import frc.robot.commands.SmartCommands.ClimbPose;
import frc.robot.commands.SmartCommands.CollectFloorPose;
import frc.robot.commands.SmartCommands.CollectFloorPoseBack;
import frc.robot.commands.SmartCommands.CollectFloorPoseParallel;
import frc.robot.commands.SmartCommands.CollectFloorPoseParallelWithSequentialIntake;
import frc.robot.commands.SmartCommands.CollectSinglePoseParallel;
import frc.robot.commands.SmartCommands.CollectSinglePoseParallelWithSequentialIntake;
import frc.robot.commands.SmartCommands.HomePose;
import frc.robot.commands.SmartCommands.HomePoseParallel;
import frc.robot.commands.SmartCommands.Collects.CollectLoadingStationPose;
import frc.robot.commands.SmartCommands.Collects.CollectUprightPose;
import frc.robot.commands.SmartCommands.Scores.ScoreHighConePose;
import frc.robot.commands.SmartCommands.Scores.ScoreHighConePoseParallel;
import frc.robot.commands.SmartCommands.Scores.ScoreHighCubePose;
import frc.robot.commands.SmartCommands.Scores.ScoreHighCubePoseParallel;
import frc.robot.commands.SmartCommands.Scores.ScoreMiddleConePose;
import frc.robot.commands.SmartCommands.Scores.ScoreMiddleCubePose;
import frc.robot.commands.SmartCommands.Auto.PickupCubeRedLoadingStation;
import frc.robot.commands.SmartCommands.Auto.PickupCubeRedLoadingStationv2;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.Button;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.POVButton;
import edu.wpi.first.wpilibj2.command.ConditionalCommand;


import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;


import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.POVButton;
import edu.wpi.first.wpilibj2.command.button.Button;

import frc.robot.subsystems.*;

import frc.robot.commands.ElevatorCommands.ElevatorGoToPosition;
import frc.robot.commands.ElevatorCommands.ElevatorJoystick;

import frc.robot.commands.DrivetrainCommands.DriveWithSlow;
import frc.robot.commands.DrivetrainCommands.DriveWithSlowAndTurbo;
import frc.robot.commands.DrivetrainCommands.Reset;
import frc.robot.commands.LEDCommands.Green;


import edu.wpi.first.wpilibj2.command.button.Trigger;

import frc.robot.commands.LEDCommands.SpiritColors;
import frc.robot.commands.SmartCommands.Auto.AutoDrive;
import frc.robot.commands.SmartCommands.Auto.HighConeBackup;
import frc.robot.commands.SmartCommands.Auto.HighCube;
import frc.robot.commands.SmartCommands.Auto.HighCubeAndEngageAuto;
import frc.robot.commands.SmartCommands.Auto.HighCubeAndEngageAutoFast;
import frc.robot.commands.SmartCommands.Auto.HighCubeAndTaxiThenEngage;
import frc.robot.commands.SmartCommands.Auto.PickupCubeBlueFarLoadingStation;
import frc.robot.commands.SmartCommands.Auto.PickupCubeBlueLoadingStation;
import frc.robot.commands.SmartCommands.Auto.PickupCubeBlueLoadingStationv2;
import frc.robot.commands.SmartCommands.Auto.PickupCubeRedFarLoadingStation;
import frc.robot.commands.SmartCommands.ClimbPoseBack;



/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();


// The robot's subsystems
    public final intake m_intake = new intake();
    public final wrist m_wrist = new wrist();
    public final elevator m_elevator = new elevator();
    public final arm m_arm = new arm();
    //public final drivetrain m_drivetrain = new drivetrain();
    public final leds m_leds = new leds();

    private DoubleSupplier translationSup;
    private DoubleSupplier strafeSup;
    private DoubleSupplier rotationSup;
    private BooleanSupplier robotCentricSup;


// Joysticks
private final XboxController xboxController1 = new XboxController(1);
private final XboxController xboxController0 = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  
  */


  private final Joystick driver = new Joystick(0);

  /* Drive Controls */
  private final int translationAxis = XboxController.Axis.kLeftY.value;
  private final int strafeAxis = XboxController.Axis.kLeftX.value;
  private final int rotationAxis = XboxController.Axis.kRightX.value;


  private final int driverRightTrig = XboxController.Axis.kRightTrigger.value;

  /* Driver Buttons */
  private final JoystickButton zeroGyro = new JoystickButton(driver, XboxController.Button.kStart.value);
  private final JoystickButton robotCentric = new JoystickButton(driver, XboxController.Button.kLeftStick.value);

 /*  private final POVButton down = new POVButton(driver, 180);
  private final POVButton up = new POVButton(driver, 0);
  private final POVButton left = new POVButton(driver, 270);
  private final POVButton right = new POVButton(driver, 90);
  */
  /* Subsystems */
  public final drivetrain m_drivetrain = new drivetrain();




  private RobotContainer() {
  
    // Configure the button bindings

    /*SmartDashboard.putData("MOD0", Constants.Swerve.Mod0.angleOffset);
    SmartDashboard.putData("MOD1", Constants.Swerve.Mod1.angleOffset);
    SmartDashboard.putData("MOD2", Constants.Swerve.Mod2.angleOffset);
    SmartDashboard.putData("MOD3", Constants.Swerve.Mod3.angleOffset);*/
    //SmartDashboard.putData("cone high front", new ArmGoToPosition(m_arm,SetPoints.armPlaceConeHighFront));
   // SmartDashboard.putData("armGoHome", new ArmGoToPosition(m_arm, SetPoints.armHome));
   // SmartDashboard.putData("Cone middle front", new ArmGoToPosition(m_arm, SetPoints.armPlaceConeMiddleFront));
   // SmartDashboard.putData("hybrid front", new ArmGoToPosition(m_arm, SetPoints.armPlaceHybridFront));
    //SmartDashboard.putData("elevatorGoToPosition", new ElevatorGoToPosition(m_elevator, SetPoints.ElevatorMiddle));
    //SmartDashboard.putData("elevatorHome", new ElevatorGoToPosition(m_elevator, SetPoints.ElevatorHome));
    //SmartDashboard.putNumber("Elevator Pos", m_elevator.elevatorGetPosition());
   // SmartDashboard.putData("spirit color", new SpiritColors(m_leds));
   // SmartDashboard.putData("YELLOW", new Yellow(m_leds));
   // SmartDashboard.putData("PURPLE", new Purple(m_leds));
   // SmartDashboard.putData("GREEN", new Green(m_leds));
    SmartDashboard.putData("Reset ElevatorEncoder", new ElevatorResetEncoder(m_elevator));


   // SmartDashboard.putData("driveamount", new DriveAmount(m_drivetrain, 100));
    

    configureButtonBindings();

    // Configure default commands

    m_intake.setDefaultCommand(new ScoreWithTrigger(m_intake, xboxController0));
   //m_wrist.setDefaultCommand(new WristMoveOne(m_wrist, xboxController1)); //xboxController1 right Y
   // m_elevator.setDefaultCommand(new ElevatorTune( m_elevator ));
   //-----I don't think we need this drive default command anymore-----//
   // m_drivetrain.setDefaultCommand(new Drive( m_drivetrain, translationSup, strafeSup, rotationSup, robotCentricSup));
    //m_arm.setDefaultCommand(new ArmHold(m_arm));
    //m_leds.setDefaultCommand(new SpiritColors(m_leds));

    /*m_drivetrain.setDefaultCommand(
            new DriveWithSlow(
                m_drivetrain, 
                () -> -driver.getRawAxis(translationAxis), 
                () -> -driver.getRawAxis(strafeAxis), 
                () -> -driver.getRawAxis(rotationAxis), 
                () -> robotCentric.getAsBoolean(),
                xboxController0

            )
        );
    */
        
    // Configure autonomous sendable chooser
      

    m_chooser.setDefaultOption("HighCubeAndEngage", new HighCubeAndEngageAuto(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    m_chooser.addOption("HighCube", new HighCube(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    m_chooser.addOption("HighConeBackup", new HighConeBackup(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));

    m_chooser.addOption("HighCubeAndEngage", new HighCubeAndEngageAuto(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    //add blue far, red, and red far
    m_chooser.addOption("HighCubeTaxiThenEngage", new HighCubeAndTaxiThenEngage(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    m_chooser.addOption("PickupCubeBLUELoadingStationV2", new PickupCubeBlueLoadingStationv2(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    m_chooser.addOption("PickupCubeREDLoadingStationV2", new PickupCubeRedLoadingStationv2(m_intake, m_wrist, m_arm, m_elevator, m_drivetrain, m_leds));
    SmartDashboard.putData("Auto Mode", m_chooser);

 
  }


  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  
  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

// Create some buttons
//final JoystickButton xboxButton2 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
//xboxButton2.onTrue(new WristGo( m_wrist ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));


//------------------DRIVER CONTROLLER-------------------------//

final JoystickButton xboxButtonB = new JoystickButton(xboxController0, XboxController.Button.kB.value);
final JoystickButton xboxButtonA = new JoystickButton(xboxController0, XboxController.Button.kA.value);  
final JoystickButton xboxButtonY = new JoystickButton(xboxController0, XboxController.Button.kY.value);
final JoystickButton xboxButtonX = new JoystickButton(xboxController0, XboxController.Button.kX.value);
final JoystickButton xboxButtonLB = new JoystickButton(xboxController0, XboxController.Button.kLeftBumper.value); 
final JoystickButton xboxButtonRB = new JoystickButton(xboxController0, XboxController.Button.kRightBumper.value);
final JoystickButton xboxButtonStart = new JoystickButton(xboxController0, XboxController.Button.kStart.value);
final JoystickButton xboxButtonSelect = new JoystickButton(xboxController0, XboxController.Button.kBack.value);  

xboxButtonB.onTrue(new CollectLoadingStationPose(m_elevator, m_intake, m_wrist, m_arm, m_leds));
xboxButtonA.onTrue(new CollectFloorPoseParallelWithSequentialIntake(m_elevator, m_intake, m_wrist, m_arm, m_leds));
xboxButtonY.onTrue(new HomePoseParallel(m_elevator, m_intake, m_wrist, m_arm));
//xboxButtonX.onTrue(new CollectUprightPose(m_elevator, m_intake, m_wrist, m_arm, m_leds));  
xboxButtonX.onTrue(new CollectSinglePoseParallelWithSequentialIntake(m_elevator, m_intake, m_wrist, m_arm, m_leds));   
xboxButtonLB.onTrue(new ClimbPoseBack(m_elevator, m_intake, m_wrist, m_arm));
xboxButtonRB.onTrue(new IntakeMotorGo(m_intake, -0.2));
xboxButtonStart.onTrue(new ZeroGyro(m_drivetrain));
xboxButtonSelect.onTrue(new CollectFloorPoseBack(m_elevator, m_intake, m_wrist, m_arm, m_leds));


 //------------------------OPERATOR CONTROLLER----------------------//

final JoystickButton xbox2ButtonA = new JoystickButton(xboxController1, XboxController.Button.kA.value);     
final JoystickButton xbox2ButtonY = new JoystickButton(xboxController1, XboxController.Button.kY.value); 
final JoystickButton xbox2ButtonX = new JoystickButton(xboxController1, XboxController.Button.kX.value);
final JoystickButton xbox2ButtonB = new JoystickButton(xboxController1, XboxController.Button.kB.value);          
final JoystickButton xbox2ButtonLB = new JoystickButton(xboxController1, XboxController.Button.kLeftBumper.value);
final JoystickButton xbox2ButtonRB = new JoystickButton(xboxController1, XboxController.Button.kRightBumper.value);
final JoystickButton xbox2ButtonStart = new JoystickButton(xboxController1,XboxController.Button.kStart.value);
final JoystickButton xbox2ButtonSelect = new JoystickButton(xboxController1,XboxController.Button.kBack.value);

xbox2ButtonX.onTrue(new ScoreMiddleConePose(m_intake, m_wrist, m_arm, m_elevator));
xbox2ButtonY.onTrue(new ScoreHighConePoseParallel(m_intake, m_wrist, m_arm, m_elevator));
xbox2ButtonA.onTrue(new ScoreMiddleCubePose(m_intake, m_wrist, m_arm, m_elevator));
xbox2ButtonB.onFalse(new ScoreHighCubePoseParallel(m_intake, m_wrist, m_arm, m_elevator));
xbox2ButtonLB.onTrue(new IntakeMotorStop(m_intake));
xbox2ButtonStart.onTrue(new Purple(m_leds));
xbox2ButtonSelect.onTrue(new Yellow(m_leds));
xbox2ButtonRB.onTrue(new Reset(m_drivetrain));



//final JoystickButton xbox2ButtonRB = new JoystickButton(xboxController1, XboxController.Button.kRightBumper.value);
//xbox2ButtonRB.onTrue(new ScoreMiddleConePose(m_intake, m_wrist, m_arm, m_elevator));
//xboxButton2Start.onTrue(new WristGoToPosition(m_wrist, SetPoints.WristHome));
zeroGyro.onTrue(new ZeroGyro(m_drivetrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

  }

    
public XboxController getxboxController0() {
      return xboxController0;
    }

public XboxController getxboxController1() {
      return xboxController1;
    }


    

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

