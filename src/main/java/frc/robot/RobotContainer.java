



// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

//import frc.robot.commands.*;
import frc.robot.commands.ArmCommands.ArmGo;
import frc.robot.commands.ArmCommands.ArmGoToPosition;
import frc.robot.commands.ArmCommands.ArmStop;
import frc.robot.commands.ArmCommands.ArmHold;
import frc.robot.commands.ArmCommands.ArmJoystick;
import frc.robot.commands.ArmCommands.VelocityMode;
//import frc.robot.commands.ArmCommands.ArmMotorLeadGo;
//import frc.robot.commands.ArmCommands.ArmMotorLeadStop;

import frc.robot.commands.DrivetrainCommands.Drive;
import frc.robot.commands.DrivetrainCommands.ZeroGyro;
import frc.robot.commands.ElevatorCommands.ElevatorManual;
import frc.robot.commands.ElevatorCommands.ElevatorMotorGo;
import frc.robot.commands.ElevatorCommands.ElevatorMotorStop;
import frc.robot.commands.ElevatorCommands.ElevatorTune;
import frc.robot.commands.ExampleCommands.AutonomousCommand;
import frc.robot.commands.ExampleCommands.ExampleCommand;
import frc.robot.commands.ExampleCommands.ExampleInstantCommand;
import frc.robot.commands.ExampleCommands.ExampleSequentialCommandGroup;
import frc.robot.commands.IntakeCommands.IntakeDoNothing;
import frc.robot.commands.IntakeCommands.IntakeMotorLeftGo;
//import frc.robot.commands.IntakeCommands.IntakeMotorLeftGoLoop;
import frc.robot.commands.IntakeCommands.IntakeMotorLeftStop;
import frc.robot.commands.IntakeCommands.IntakeMotorRightGo;
//import frc.robot.commands.IntakeCommands.IntakeMotorRightGoLoop;
import frc.robot.commands.IntakeCommands.IntakeMotorRightStop;
//import frc.robot.commands.IntakeCommands.IntakeMotorSqueezeGo;
import frc.robot.commands.IntakeCommands.Squeeze;
import frc.robot.commands.IntakeCommands.Release;
//import frc.robot.commands.IntakeCommands.IntakeMotorSqueezeStop;
import frc.robot.commands.IntakeCommands.SmartCollect;
//import frc.robot.commands.WristCommands.WristManual;
import frc.robot.commands.WristCommands.WristGo;
//import frc.robot.commands.WristCommands.WristMotorGoToPosition;
import frc.robot.commands.WristCommands.WristStop;
import frc.robot.commands.WristCommands.WristHold;
import frc.robot.commands.WristCommands.WristMoveBack;
import frc.robot.commands.WristCommands.WristMoveHome;
import frc.robot.commands.WristCommands.WristMoveTop;
import frc.robot.subsystems.*;
import frc.robot.subsystems.drivetrain;

import frc.robot.commands.DrivetrainCommands.Drive;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import frc.robot.commands.DrivetrainCommands.Drive.*;


import frc.robot.commands.LEDCommands.SpiritColors;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.ConditionalCommand;


import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;


import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;

import frc.robot.subsystems.*;

import frc.robot.commands.ElevatorCommands.ElevatorGoToPosition;
import frc.robot.commands.ElevatorCommands.ElevatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();


// The robot's subsystems
    public final intake m_intake = new intake();
    public final wrist m_wrist = new wrist();
    public final elevator m_elevator = new elevator();
    public final arm m_arm = new arm();
    //public final drivetrain m_drivetrain = new drivetrain();
    public final leds m_leds = new leds();

    private DoubleSupplier translationSup;
    private DoubleSupplier strafeSup;
    private DoubleSupplier rotationSup;
    private BooleanSupplier robotCentricSup;


// Joysticks
private final XboxController xboxController2 = new XboxController(1);
private final XboxController xboxController1 = new XboxController(0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  
  */


  private final Joystick driver = new Joystick(0);

  /* Drive Controls */
  private final int translationAxis = XboxController.Axis.kLeftY.value;
  private final int strafeAxis = XboxController.Axis.kLeftX.value;
  private final int rotationAxis = XboxController.Axis.kRightX.value;

  /* Driver Buttons */
  private final JoystickButton zeroGyro = new JoystickButton(driver, XboxController.Button.kY.value);
  private final JoystickButton robotCentric = new JoystickButton(driver, XboxController.Button.kLeftBumper.value);

  /* Subsystems */
  private final drivetrain m_drivetrain = new drivetrain();




  private RobotContainer() {
        
    
    // Smartdashboard Subsystems


    // SmartDashboard Buttons
    /*SmartDashboard.putData("AutonomousCommand", new AutonomousCommand());
    SmartDashboard.putData("ExampleCommand", new ExampleCommand( m_wrist ));
    SmartDashboard.putData("ExampleSequentialCommandGroup", new ExampleSequentialCommandGroup( m_wrist ));
    SmartDashboard.putData("ExampleInstantCommand", new ExampleInstantCommand( m_wrist ));
    SmartDashboard.putData("ArmGo", new ArmGo( m_arm ));
    SmartDashboard.putData("ArmHold", new ArmHold( m_arm ));

    SmartDashboard.putData("ArmJoystick", new ArmJoystick( m_arm ));

    SmartDashboard.putData("ArmStop", new ArmStop( m_arm ));
    SmartDashboard.putData("VelocityMode", new VelocityMode( m_arm ));
    SmartDashboard.putData("ElevatorMotorGo", new ElevatorMotorGo( m_elevator ));
    SmartDashboard.putData("ElevatorMotorStop", new ElevatorMotorStop( m_elevator ));
    SmartDashboard.putData("WristMotorGo", new WristGo( m_wrist ));
    SmartDashboard.putData("WristMotorStop", new WristStop( m_wrist ));
    SmartDashboard.putData("IntakeMotorLeftGo", new IntakeMotorLeftGo( m_intake ));
    SmartDashboard.putData("IntakeMotorLeftStop", new IntakeMotorLeftStop( m_intake ));
    SmartDashboard.putData("IntakeMotorRightGo", new IntakeMotorRightGo( m_intake ));
    SmartDashboard.putData("IntakeMotorRightStop", new IntakeMotorRightStop( m_intake ));
    SmartDashboard.putData("Squeeze", new Squeeze( m_intake ));
    SmartDashboard.putData("Release", new Release( m_intake ));
    SmartDashboard.putData("ElevatorMotorGoToPosition", new ElevatorMotorGoToPosition( m_elevator ));
    //SmartDashboard.putData("WristMotorGoToPosition", new WristMotorGoToPosition( m_wrist ));
   // SmartDashboard.putData("IntakeMotorLeftGoLoop", new IntakeMotorLeftGoLoop( m_intake ));
    //SmartDashboard.putData("IntakeMotorRightGoLoop", new IntakeMotorRightGoLoop( m_intake ));
    SmartDashboard.putData("IntakeMotorSqueezeGoToPosition", new Squeeze( m_intake ));
    SmartDashboard.putData("SmartCollect", new SmartCollect( m_intake ));
    SmartDashboard.putData("JoystickDrive", new Drive( m_drivetrain, translationSup, strafeSup, rotationSup, robotCentricSup));
    SmartDashboard.putData("ElevatorManual", new ElevatorManual( m_elevator ));
    //SmartDashboard.putData("WristManual", new WristManual( m_wrist ));
    SmartDashboard.putData("IntakeDoNothing", new IntakeDoNothing( m_intake ));
*/
  
    // Configure the button bindings

    /*SmartDashboard.putData("MOD0", Constants.Swerve.Mod0.angleOffset);
    SmartDashboard.putData("MOD1", Constants.Swerve.Mod1.angleOffset);
    SmartDashboard.putData("MOD2", Constants.Swerve.Mod2.angleOffset);
    SmartDashboard.putData("MOD3", Constants.Swerve.Mod3.angleOffset);*/
    SmartDashboard.putData("cone high front", new ArmGoToPosition(m_arm,SetPoints.armPlaceConeHighFront));
    SmartDashboard.putData("armGoHome", new ArmGoToPosition(m_arm, SetPoints.armHome));
    SmartDashboard.putData("Cone middle front", new ArmGoToPosition(m_arm, SetPoints.armPlaceConeMiddleFront));
    SmartDashboard.putData("hybrid front", new ArmGoToPosition(m_arm, SetPoints.armPlaceHybridFront));

    SmartDashboard.putData("elevatorGoToPosition", new ElevatorGoToPosition(m_elevator, SetPoints.ElevatorMiddle));
    SmartDashboard.putData("elevatorHome", new ElevatorGoToPosition(m_elevator, SetPoints.ElevatorHome));

    SmartDashboard.putNumber("Elevator Pos", m_elevator.elevatorGetPosition());
    

    configureButtonBindings();

    // Configure default commands

    //m_intake.setDefaultCommand(new IntakeDoNothing( m_intake ));
    //m_wrist.setDefaultCommand(new WristManual( m_wrist ));
    m_elevator.setDefaultCommand(new ElevatorTune( m_elevator ));
    //m_drivetrain.setDefaultCommand(new Drive( m_drivetrain, translationSup, strafeSup, rotationSup, robotCentricSup));
    m_arm.setDefaultCommand(new ArmHold( m_arm ));
    //m_leds.setDefaultCommand(new SpiritColors(m_leds));

    m_drivetrain.setDefaultCommand(
            new Drive(
                m_drivetrain, 
                () -> -driver.getRawAxis(translationAxis), 
                () -> -driver.getRawAxis(strafeAxis), 
                () -> -driver.getRawAxis(rotationAxis), 
                () -> robotCentric.getAsBoolean()
            )
        );





    




    
    




    // Configure autonomous sendable chooser
      

    m_chooser.setDefaultOption("AutonomousCommand", new AutonomousCommand());

    

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

// Create some buttons
final JoystickButton xboxButton2 = new JoystickButton(xboxController2, XboxController.Button.kA.value);        
xboxButton2.onTrue(new WristGo( m_wrist ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
final JoystickButton xboxButton1 = new JoystickButton(xboxController1, XboxController.Button.kA.value);        
xboxButton1.onTrue(new ArmGo( m_arm ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
                        
zeroGyro.onTrue(new ZeroGyro(m_drivetrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

  }

    
public XboxController getXboxController1() {
      return xboxController1;
    }

public XboxController getXboxController2() {
      return xboxController2;
    }


    

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
  

}

