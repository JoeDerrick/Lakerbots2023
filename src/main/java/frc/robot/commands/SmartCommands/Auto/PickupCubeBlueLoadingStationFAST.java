// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: SequentialCommandGroup.

package frc.robot.commands.SmartCommands.Auto;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.SetPoints;
import frc.robot.commands.DrivetrainCommands.DriveAmount;
import frc.robot.commands.DrivetrainCommands.DriveAmountWhileCollecting;
import frc.robot.commands.ElevatorCommands.ElevatorGoToPosition;
import frc.robot.commands.IntakeCommands.IntakeCube;
import frc.robot.commands.IntakeCommands.IntakeMotorGo;
import frc.robot.commands.SmartCommands.ClimbPoseBack;
import frc.robot.commands.SmartCommands.HomePose;
import frc.robot.commands.SmartCommands.Scores.ScoreHighConePose;
import frc.robot.commands.SmartCommands.Scores.ScoreHighConePoseParallel;
import frc.robot.commands.SmartCommands.Scores.ScoreHighCubePose;
import frc.robot.commands.SmartCommands.Transitions.CubeToScoreWithArmFlip;
import frc.robot.commands.SmartCommands.Transitions.ScoreToCubeWithArmFlip;
import frc.robot.subsystems.elevator;
import frc.robot.subsystems.intake;
import frc.robot.subsystems.arm;
import frc.robot.subsystems.drivetrain;
import frc.robot.commands.SmartCommands.Balance;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class PickupCubeBlueLoadingStationFAST extends SequentialCommandGroup {

    
    public PickupCubeBlueLoadingStationFAST(intake intake, wrist wrist, arm arm, elevator elevator, drivetrain drivetrain){


    addCommands(
        
        new ScoreHighConePoseParallel(intake, wrist, arm, elevator),
        new IntakeMotorGo(intake, -0.2).withTimeout(.1),
        new ElevatorGoToPosition(elevator, SetPoints.ElevatorHome),
        new ScoreToCubeWithArmFlip(140,-.4,0.045,intake, drivetrain, wrist, arm, elevator),
        new CubeToScoreWithArmFlip(140, .4, 0, intake, drivetrain, wrist, arm, elevator),
        new ScoreHighCubePose(intake, wrist, arm, elevator),
        new IntakeMotorGo(intake, -.2).withTimeout(.2)
       // new Balance(drivetrain)
        );
    }

    @Override
    public boolean runsWhenDisabled() {
       
        return false;

   
    }
}
